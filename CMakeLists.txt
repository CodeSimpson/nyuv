cmake_minimum_required(VERSION 3.5)
project(nyuv)

set(_VERSION_MAJOR 0)
set(_VERSION_MINOR 9)
set(_VERSION_PATCH 8)
set(CPACK_PACKAGE_VERSION_MAJOR "${_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${_VERSION_PATCH}")

option(INSTALL "BUILD INSTALL" OFF)
if (${INSTALL})
    add_definitions(-DINSTALL)
    set(LIB_DIR /usr/lib/nyuv/)
    link_directories(${LIB_DIR})
else()
    set(LIB_DIR ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
    link_directories(${LIB_DIR})
endif()

option(DEBUG "BUILD DEBUG" OFF)
if (${DEBUG})
    SET(CMAKE_BUILD_TYPE "Debug")
    SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb")
    SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/debug/lib)
    SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/debug/bin)
else()
    SET(CMAKE_BUILD_TYPE "Release")
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/release/lib)
    SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/release/bin)
endif()
message("CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11 -pthread")


INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/common/base)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/common/utils)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/common/utils/tinyxml2)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/interface)

ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/cvts)
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/interface)
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/common)

option(GUI "BUILD GUI" ON)
if (${GUI})
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/gui)
endif()
message("BUILD_GUI=${GUI}")

option(TEST "BUILD TEST" OFF)
if (${TEST})
    #test
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/test)
endif()
message("BUILD_TEST=${TEST}")

set(CPACK_GENERATOR "DEB")
set(CPACK_PACKAGE_NAME "nyuv")
set(CPACK_DEBIAN_PACKAGE_NAME "nyuv")
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "amd64")

set(CPACK_DEBIAN_PACKAGE_DEPENDS "libqt5core5a, libqt5gui5")
set(CPACK_DEBIAN_PACKAGE_SECTION "app")
set(CPACK_DEBIAN_PACKAGE_PRIORITY "Optional")
set(CPACK_PACKAGE_DESCRIPTION "-")

set(CPACK_PACKAGE_CONTACT "caibingcheng@xiaomi.com")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "members of caibingcheng@xiaomi.com")

# set(LIBS_DIR ${CMAKE_SOURCE_DIR}/lib)
# set(DOCS_DIR ${CMAKE_SOURCE_DIR}/doc)
# set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
# Â "${LIBS_DIR}/postinst;${LIBS_DIR}/postrm;${LIBS_DIR}/prerm")

file(COPY ${PROJECT_SOURCE_DIR}/cvts/liblist.xml DESTINATION ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
set(CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
    OWNER_READ
    OWNER_WRITE
    OWNER_EXECUTE
    GROUP_READ
)
set(CMAKE_INSTALL_PREFIX /usr)
file(GLOB GLOB_BIN ${EXECUTABLE_OUTPUT_PATH}/nyuv)
file(GLOB GLOB_LIB ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/*)
INSTALL(FILES ${GLOB_BIN} DESTINATION bin PERMISSIONS WORLD_EXECUTE)
INSTALL(FILES ${GLOB_LIB} DESTINATION lib/nyuv)
INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/nyuv.desktop DESTINATION share/applications/)
INSTALL(FILES ${EXECUTABLE_OUTPUT_PATH}/.nyuv.config DESTINATION /etc/nyuv/ PERMISSIONS WORLD_WRITE WORLD_READ)

include(CPack)